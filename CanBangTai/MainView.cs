using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Windows.Forms;
using System.Threading;
using Sharp7;
using SAP.Middleware.Connector;

namespace CanBangTai
{
    public partial class MainView : DevExpress.XtraEditors.XtraForm
    {
        public MainView()
        {
            InitializeComponent();
            Control.CheckForIllegalCrossThreadCalls = false;
            if (!mvvmContext1.IsDesignMode)
                InitializeBindings();
            this.Size = this.MaximumSize = this.MinimumSize = new Size(Screen.PrimaryScreen.WorkingArea.Width, Screen.PrimaryScreen.WorkingArea.Height);

            // This line of code is generated by Data Source Configuration Wizard
            // Create a new DataSet
            System.Data.DataSet xmlDataSet = new System.Data.DataSet("XML DataSet");
            // Load the XML document to the DataSet System.IO.Directory.GetCurrentDirectory() + @"\config.xml"
            xmlDataSet.ReadXml(System.IO.Directory.GetCurrentDirectory() + @"\CBT.xml");
            // This line of code is generated by Data Source Configuration Wizard
            gridControl1.DataSource = xmlDataSet.Tables["table1"];
            btn_refresh.Enabled = false;
        }
        private void loadForm(object sender, EventArgs e)
        {
            // Call thread get weight real time
            Thread thrd = new Thread(new ThreadStart(LoadWeight));
            thrd.IsBackground = true;
            thrd.Start();
        }
        void InitializeBindings()
        {
            var fluent = mvvmContext1.OfType<MainViewModel>();
        }

        // This event is generated by Data Source Configuration Wizard
        void unboundSource1_ValueNeeded(object sender, DevExpress.Data.UnboundSourceValueNeededEventArgs e)
        {

            // Handle this event to obtain data from your data source
            // e.Value = something /* TODO: Assign the real data here.*/
        }

        // This event is generated by Data Source Configuration Wizard
        void unboundSource1_ValuePushed(object sender, DevExpress.Data.UnboundSourceValuePushedEventArgs e)
        {

            // Handle this event to save modified data back to your data source
            // something = e.Value; /* TODO: Propagate the value into the storage.*/
        }

        private void btn_push_CheckedChanged(object sender, EventArgs e)
        {
            foreach( int i in gridView1.GetSelectedRows() )
            {
                DataRow row = gridView1.GetDataRow(i);
                MessageBox.Show(row[0].ToString());
                //gridView1.SetRowCellValue(i, "colcolCheck", true);
            }
        }

        void LoadWeight()
        {
            int error = 0;
            if (!this.IsHandleCreated)
            {
                this.CreateHandle();
            }
            int n = 0;
            while ( error == 0)
            {
                try
                {
                    gridControl1.Invoke(new MethodInvoker(delegate()
                    {
                        for (int i = 0; i < gridView1.RowCount; i++)
                        {
                            // Lay so can
                            DataRow row = gridView1.GetDataRow(i);
                            // Lay thong tin cua 1 phan mem can
                            CBT cbt = new CBT();
                            cbt.ColName = row["colName"].ToString();
                            cbt.ColAddr = row["colAddr"].ToString();
                            cbt.ColNoSlot = row["colNoSlot"].ToString();
                            cbt.ColAddrPLC = row["colAddrPLC"].ToString();
                            cbt.ColName = row["colName"].ToString();
                            cbt.ColMaxDB = row["colMaxDB"].ToString();
                            cbt.ColNoDB = row["colNoDB"].ToString();
                            n = n + 1;
                            //string weight = n.ToString();
                            string weight = GetWeightPLC(cbt).ToString();
                            if (weight == "-1")
                            {
                                txtMsg.Text = ("Kết nối tới cân băng tải " + cbt.ColName + " thất bại!!!");
                                error = 1;
                                btn_refresh.Enabled = true;
                                return;
                            }
                            gridView1.SetRowCellValue(i, "colWeight", weight);
                        }
                    }
                    )) ;
                }
                catch { };
                Thread.Sleep(1000);
            }

        }

        private object GetWeightPLC(CBT cbt)
        {
            S7Client client = new S7Client();
            // Connect IP
            int result = client.ConnectTo(cbt.ColAddrPLC, 0, Int32.Parse(cbt.ColNoSlot)); // change to your PLC's IP
            if (result != 0)
            {
                return -1;
            }
            // Define DB
            byte[] db2Buffer = new byte[Int32.Parse(cbt.ColMaxDB)];
            // Get DB
            int result1 = client.DBRead(Int32.Parse(cbt.ColNoDB), 0, db2Buffer.Length, db2Buffer);
            // Get Weight from DB
            var intVar1 = S7.GetRealAt(db2Buffer, Int32.Parse(cbt.ColAddr));

            result = client.Disconnect();
            return intVar1;
        }

        private void btn_refresh_CheckedChanged(object sender, EventArgs e)
        {
            // Call thread get weight real time
            txtMsg.Text = "";
            btn_refresh.Enabled = false;
            Thread thrd = new Thread(new ThreadStart(LoadWeight));
            thrd.IsBackground = true;
            thrd.Start();
        }

        private void checkButton1_CheckedChanged(object sender, EventArgs e)
        {
            if (InfoIsCheck())
            {
                // Push data to SAP
                bool checkLogin;
                RfcDestination dest;

                string msg = LoginSAP(out checkLogin, out dest);
                if (checkLogin == true) // Đăng nhập thành công
                {

                    RfcRepository repo = dest.Repository;
                    // set value input
                    IRfcFunction rfcFunct = repo.CreateFunction("ZCBT_FM_GETDATA");  //Gọi hàm ở SAP

                    //prepare input parameters
                    IRfcStructure impStruct = rfcFunct.GetStructure("IMPORT_DATA");
                    // fill the table parameter
                    IRfcTable rfcTable = rfcFunct.GetTable("GT_DATA");
                    foreach (int i in gridView1.GetSelectedRows())
                    {
                        DataRow row = gridView1.GetDataRow(i);
                        // make a copy of impStruct
                        IRfcStructure rowSAP = (IRfcStructure)impStruct.Clone();
                        rowSAP.SetValue("TRAMCAN", row["colName"].ToString());
                        rowSAP.SetValue("SOCAN1", double.Parse(row["colWeight"].ToString()));
                        if ( row["colPush"].ToString() != "" )
                        {
                            rowSAP.SetValue("SOCAN2", double.Parse(row["colPush"].ToString()));
                        }
                        if (row["colDate"].ToString() != "")
                        {
                            rowSAP.SetValue("DATUM2", row["colDate"].ToString());
                        }
                        if (row["colTime"].ToString() != "")
                        {
                            rowSAP.SetValue("TIMLO2", row["colTime"].ToString());
                        }
                        rowSAP.SetValue("NOTE", row["colNote"].ToString());
                        rfcTable.Append(rowSAP);
                    }

                    try
                    {
                        rfcFunct.Invoke(dest);
                    }
                    catch (Exception ex)
                    {
                        msg = ex.Message;
                        msg = msg + "/n /l Có lỗi khi chuyển SAP!!!";
                        txtMsg.Text = msg;
                    };
                    string result = rfcFunct.GetValue("RESULT").ToString();
                    rfcTable = rfcFunct.GetTable("GT_DATA");

                    if (result == "TRUE")
                    {
                        txtMsg.Text = "Chuyển phiếu cân lên SAP thành công";
                        foreach (var rowSAP in rfcTable)
                        {
                            for (int i = 0; i < gridView1.RowCount; i++)
                            {
                                DataRow row = gridView1.GetDataRow(i);
                                // Update so can lan truoc
                                if (row["colName"].ToString() == rowSAP.GetValue("TRAMCAN").ToString())
                                {
                                    double socan = double.Parse(rowSAP.GetValue("SOCAN1").ToString());
                                    gridView1.SetRowCellValue(i, "colPush", socan.ToString());
                                    gridView1.SetRowCellValue(i, "colDate", rowSAP.GetValue("DATUM1").ToString());
                                    gridView1.SetRowCellValue(i, "colTime", rowSAP.GetValue("TIMLO1").ToString());
                                }
                            }
                        }
                    }
                }
                else
                {
                    txtMsg.Text = msg;
                }
            }
        }
        private string LoginSAP(out bool checkLogin, out RfcDestination dest)
        {
            string msg = "";
            checkLogin = true;
            ECCDestinationConfig cfg = new ECCDestinationConfig(); // khoi tao
            if (!RfcDestinationManager.IsDestinationConfigurationRegistered()) // kiem tra da khoi tao chua?
            {
                // chưa -> kết nối  
                RfcDestinationManager.RegisterDestinationConfiguration(cfg);
            }

            //dest = RfcDestinationManager.GetDestination(ABAP_APP_SERVER);
            dest = RfcDestinationManager.GetDestination("mySAPdestination"); // gan thong so

            try
            {
                RfcRepository repo = dest.Repository;   // Kiem tra trang thai dang nhap
            }
            catch (Exception ex)
            {
                // Hủy kết nối
                RfcDestinationManager.UnregisterDestinationConfiguration(cfg);
                // thông báo hủy
                msg = ex.ToString();
                checkLogin = false;
            };

            return msg;
        }

        private bool IsCheck()
        {
            foreach (int i in gridView1.GetSelectedRows())
            {
                return true;
            }
            return false;
        }
        private bool InfoIsCheck()
        {
            if (IsCheck() == false)
            {
                txtMsg.Text = "Vui lòng chọn ít nhất 1 dòng để thao tác";
            }
            return IsCheck();
        }

        private void checkButton2_CheckedChanged(object sender, EventArgs e)
        {
            if (InfoIsCheck())
            {
                // Push data to SAP
                bool checkLogin;
                RfcDestination dest;

                string msg = LoginSAP(out checkLogin, out dest);
                if (checkLogin == true) // Đăng nhập thành công
                {

                    RfcRepository repo = dest.Repository;
                    // set value input
                    IRfcFunction rfcFunct = repo.CreateFunction("ZCBT_FM_GETDATA_HIS");  //Gọi hàm ở SAP

                    //prepare input parameters
                    IRfcStructure impStruct = rfcFunct.GetStructure("IMPORT_DATA");
                    // fill the table parameter

                    // fill the table parameter
                    IRfcTable rfcTable = rfcFunct.GetTable("GT_DATA");
                    foreach (int i in gridView1.GetSelectedRows())
                    {
                        DataRow row = gridView1.GetDataRow(i);
                        // make a copy of impStruct
                        IRfcStructure rowSAP = (IRfcStructure)impStruct.Clone();
                        rowSAP.SetValue("TRAMCAN", row["colName"].ToString());
                        rfcTable.Append(rowSAP);
                    }
                    try
                    {
                        rfcFunct.Invoke(dest);
                    }
                    catch (Exception ex)
                    {
                        msg = ex.Message;
                        msg = msg + "/n /l Có lỗi khi lấy thông tin từ SAP!!!";
                        txtMsg.Text = msg;
                    };
                    string result = rfcFunct.GetValue("RESULT").ToString();
                    rfcTable = rfcFunct.GetTable("GT_DATA");

                    if (result == "TRUE")
                    {
                        txtMsg.Text = "Lấy dữ liệu từ SAP thành công";
                        foreach (var rowSAP in rfcTable)
                        {
                            for (int i = 0; i < gridView1.RowCount; i++)
                            {
                                DataRow row = gridView1.GetDataRow(i);
                                // Update so can lan truoc
                                if (row["colName"].ToString() == rowSAP.GetValue("TRAMCAN").ToString())
                                {
                                    double socan = double.Parse(rowSAP.GetValue("SOCAN1").ToString());
                                    gridView1.SetRowCellValue(i, "colPush", socan.ToString());
                                    gridView1.SetRowCellValue(i, "colDate", rowSAP.GetValue("DATUM1").ToString());
                                    gridView1.SetRowCellValue(i, "colTime", rowSAP.GetValue("TIMLO1").ToString());
                                }
                            }
                        }
                    }
                }
                else
                {
                    txtMsg.Text = msg;
                }
            }
        }

        private void btn_reset_CheckedChanged(object sender, EventArgs e)
        {
            if (InfoIsCheck())
            {
                foreach (int i in gridView1.GetSelectedRows())
                {
                    gridView1.SetRowCellValue(i, "colPush", "");
                    gridView1.SetRowCellValue(i, "colDate", "");
                    gridView1.SetRowCellValue(i, "colTime", "");
                }
                txtMsg.Text = "Đã xóa dữ liệu cân lần trước.";
            }
        }
    }
}
